{"version":3,"sources":["Components/Hero.js","Components/Cards.js","Pages/Home.js","Components/Jumbotron.js","Pages/About.js","Components/Clock.js","App.js","serviceWorker.js","index.js"],"names":["Hero","HeroImages","this","props","HImages","id","className","data-ride","data-target","data-slide-to","class","map","imgsrc","index","src","alt","href","role","data-slide","aria-hidden","React","Component","Cards","state","countcards","CardsDataContent","CardsNewdata","length","experience","Fragment","roles","datacard","title","description","ctaURL","ctaText","data","HeroImagesOne","CardsData","Experiences","Home","Jumbotron","Aboutjumbotron","Jumbotorndata","Jdata","Index","Heading","Paragraph","CtaUrl","target","CtaText","jumbotron","About","Clock","localetime","Date","toLocaleString","setInterval","setState","PureComponent","App","to","type","data-toggle","aria-controls","aria-expanded","aria-label","placeholder","exact","path","component","getFullYear","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.15a19d78.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Hero extends React.Component {\r\n  render() {\r\n    const HeroImages = this.props.HImages;\r\n    return (\r\n      <div>\r\n        <div\r\n          id=\"carouselExampleIndicators\"\r\n          className=\"carousel slide\"\r\n          data-ride=\"carousel\"\r\n        >\r\n          <ol className=\"carousel-indicators\">\r\n            <li\r\n              data-target=\"#carouselExampleIndicators\"\r\n              data-slide-to=\"0\"\r\n              class=\"active\"\r\n            ></li>\r\n            <li\r\n              data-target=\"#carouselExampleIndicators myname\"\r\n              data-slide-to=\"1\"\r\n            ></li>\r\n            <li data-target=\"#carouselExampleIndicators\" data-slide-to=\"2\"></li>\r\n          </ol>\r\n          <div className=\"carousel-inner\">\r\n            {HeroImages.map((imgsrc, index) => (\r\n              <div\r\n                className={\r\n                  index === 0 ? \"carousel-item active\" : \"carousel-item\"\r\n                }\r\n              >\r\n                <img className=\"d-block w-100\" src={imgsrc} alt=\"First slide\" />\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <a\r\n            className=\"carousel-control-prev\"\r\n            href=\"#carouselExampleIndicators\"\r\n            role=\"button\"\r\n            data-slide=\"prev\"\r\n          >\r\n            <span\r\n              className=\"carousel-control-prev-icon\"\r\n              aria-hidden=\"true\"\r\n            ></span>\r\n            <span className=\"sr-only\">Previous</span>\r\n          </a>\r\n          <a\r\n            className=\"carousel-control-next\"\r\n            href=\"#carouselExampleIndicators\"\r\n            role=\"button\"\r\n            data-slide=\"next\"\r\n          >\r\n            <span\r\n              className=\"carousel-control-next-icon\"\r\n              aria-hidden=\"true\"\r\n            ></span>\r\n            <span className=\"sr-only\">Next</span>\r\n          </a>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Hero;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Cards extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      countcards: this.props.CardsDataContent,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const CardsNewdata = this.props.CardsDataContent;\r\n    const { length } = this.state.countcards;\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row py-5\">\r\n          {CardsNewdata.map((experience, index) => (\r\n            <React.Fragment>\r\n              {experience.roles.map((datacard, index) => (\r\n                <div\r\n                  className={\r\n                    length === 3 ? \"col-md-4 text-left\" : \"col-md-6 text-left\"\r\n                  }\r\n                >\r\n                  <h2>{datacard.title}</h2>\r\n                  <p>{datacard.description}</p>\r\n                  <p>\r\n                    <a href={datacard.ctaURL} className=\"btn btn-secondary\">\r\n                      {datacard.ctaText}\r\n                    </a>\r\n                  </p>\r\n                </div>\r\n              ))}\r\n            </React.Fragment>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Cards;\r\n","import React, { Component } from \"react\";\r\nimport Hero from \"../Components/Hero.js\";\r\nimport Cards from \"../Components/Cards.js\";\r\nimport data from \"../data.json\";\r\n\r\nconst HeroImages = data.HeroImagesOne;\r\nconst CardsData = data.Experiences;\r\n\r\nclass Home extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Hero HImages={HeroImages} />\r\n        <Cards CardsDataContent={CardsData} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Jumbotron extends Component {\r\n  render() {\r\n    const Aboutjumbotron = this.props.Jumbotorndata;\r\n    return (\r\n      <React.Fragment>\r\n        {Aboutjumbotron.map((Jdata, Index) => (\r\n          <div className=\"jumbotron text-left mt-5\">\r\n            <div className=\"container\">\r\n              <h1 className=\"display-3\">{Jdata.Heading}</h1>\r\n              <p>{Jdata.Paragraph}</p>\r\n              <p>\r\n                <a\r\n                  className=\"btn btn-primary btn-lg\"\r\n                  href={Jdata.CtaUrl}\r\n                  role=\"button\"\r\n                  target=\"_self\"\r\n                >\r\n                  {Jdata.CtaText}\r\n                </a>\r\n              </p>\r\n            </div>\r\n          </div>\r\n        ))}\r\n        ;\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Jumbotron;\r\n","import React, { Component } from \"react\";\r\nimport Jumbotron from \"../Components/Jumbotron\";\r\nimport data from \"../data.json\";\r\n\r\nconst jumbotron = data.About;\r\n\r\nclass About extends Component {\r\n  render() {\r\n    return <Jumbotron Jumbotorndata={jumbotron} />;\r\n  }\r\n}\r\n\r\nexport default About;\r\n","import React, { PureComponent } from \"react\";\r\n\r\nclass Clock extends PureComponent {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      localetime: new Date().toLocaleString(),\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    setInterval(() => {\r\n      this.setState(() => {\r\n        return { localetime: new Date().toLocaleString() };\r\n      });\r\n    }, 1000);\r\n  }\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <h4>{this.state.localetime}</h4>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Clock;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Home from \"./Pages/Home\";\r\nimport About from \"./Pages/About\";\r\nimport Clock from \"./Components/Clock\";\r\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <nav className=\"navbar navbar-expand-md navbar-dark fixed-top bg-dark\">\r\n        <Link to=\"/ReachSchoolWeb\" className=\"navbar-brand\">\r\n          React School\r\n        </Link>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-toggle=\"collapse\"\r\n          data-target=\"#navbarsExampleDefault\"\r\n          aria-controls=\"navbarsExampleDefault\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarsExampleDefault\">\r\n          <ul className=\"navbar-nav mr-auto\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/ReachSchoolWeb\">\r\n                Home<span className=\"sr-only\">(current)</span>\r\n              </Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/ReachSchoolWeb/about\">\r\n                About\r\n              </Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/\">\r\n                Contact\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n\r\n          <form className=\"form-inline my-2 my-lg-0\">\r\n            <input\r\n              className=\"form-control mr-sm-2\"\r\n              type=\"text\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button\r\n              className=\"btn btn-outline-success my-2 my-sm-0\"\r\n              type=\"submit\"\r\n            >\r\n              Search\r\n            </button>\r\n          </form>\r\n        </div>\r\n      </nav>\r\n      <Switch>\r\n        <Route exact={true} path=\"/ReachSchoolWeb\" component={Home}></Route>\r\n        <Route path=\"/ReachSchoolWeb/about\" component={About}></Route>\r\n      </Switch>\r\n      <footer class=\"container text-left py-3 border-top\">\r\n        <p>© React School {new Date().getFullYear()}</p>\r\n        <Clock />\r\n      </footer>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}